
IMP queries
mysql> show procedure status where db='DB_Name';

--------------------------------------------------------------------------------------------------------------------------------------

PL/SQL
14 a.
create table stud(RollNo int primary key, attendance int,status varchar(5));
insert into stud(RollNo,attendance) values(1,150),(2,200),(3,80),(4,70),(5,180);
select * from stud;

mysql> delimiter //
mysql> create procedure check_att(in roll int)
    -> begin
    -> declare att int;
    -> declare total int;
    -> declare exit handler for not found select 'Data not found!!!' message;
    -> set total=200;
    -> select attendance into att from stud where RollNo=roll;
    -> if ((att/total)*100)>=75 then
    -> update stud set status='ND' where RollNo=roll;
    -> select 'Term Granted' Message;
    -> else
    -> update stud set status='D' where RollNo=roll;
    -> select 'Term Not Granted' Message;
    -> end if;
    -> end;
    -> //
mysql> delimiter ;


14 b
mysql> create table account_master(ID int primary key,Current_balance int);
mysql> insert into account_master values(1,10000),(2,5000),(3,60000);

mysql> delimiter //
mysql> create procedure withdraw(in acc_id int,in amt int)
    -> begin
    -> declare bal int;
    -> declare sp condition for sqlstate '45000';
    -> select Current_balance into bal from account_master where ID=acc_id;
    -> if bal<amt then
    -> signal sqlstate '45000'
    -> set message_text='NotEnoughBalance';
    -> else
    -> set bal = bal-amt;
    -> update account_master set Current_balance=bal where ID=acc_id;
    -> end if;
    -> end;
    -> //

mysql> create procedure deposit(in acc_id int,in amt int)
    -> begin
    -> declare bal int;
    -> select current_balance into bal from account_master where ID=acc_id;
    -> update account_master set current_balance=bal+amt where ID=acc_id;
    -> end;
    -> //

15A
mysql> delimiter //
mysql> create procedure check_br(in uid int)
    -> begin
    -> declare temp_bal int;
    -> declare sp condition for sqlstate'45000';
    -> select bal_due into temp_bal from client_master where id=uid;
    -> if temp_bal<0 then
    -> signal sqlstate '45000'
    -> set message_text='BR violated';
    -> else
    -> select 'BR not violated' Message;
    -> end if;
    -> end
    -> //
Query OK, 0 rows affected (0.02 sec)

mysql> delimiter ;

15b
create procedure Calculate_fine(in roll int)
begin
declare fine_amt int;
declare no_of_days int;
declare issue_date date;
select DateofIssue into issue_date from borrower where Roll_no=roll;
select datediff(curdate(),issue_date) into no_of_days;
if no_of_days>15 and no_of_days<=30 then
set fine_amt=no_of_days*5;
elseif no_of_days>30 then
set fine_amt=(no_of_days-30)*50+30*5;
else
set fine_amt=0;
end if;
insert into fine values(roll,curdate(),fine_amt);
update borrower set Status='R' where Roll_no=roll;
end;
//

Cursor
15C
mysql> delimiter //
mysql> create procedure check_salary()
    -> begin
    -> declare temp_emp int;
    -> declare temp_dno int;
    -> declare temp_salary int;
    -> declare avg_salary int;
    -> declare temp_dno_dept_salary int;
    -> declare ec boolean;
    -> declare cur1 cursor for select avg(salary),dno from emp group by dno;
    -> declare continue handler for not found set ec=true;
    -> open cur1;
    -> l1:loop
    -> fetch cur1 into temp_salary,temp_dno;
    -> insert into dept_salary values(temp_salary,temp_dno);
    -> if ec then
    -> close cur1;
    -> leave l1;
    -> end if;
    -> end loop l1;
    -> end
    -> //

16b
delimiter //
create procedure inc_salary()
begin
declare temp_salary int;
declare temp_id int;
declare avg_salary int;
declare exitcond boolean;
declare cur cursor for select emp_id from salary;
declare cur2 cursor for select salary from salary;
declare continue handler for not found set exitcond=true;
select avg(salary) into avg_salary from salary;
open cur;
open cur2;
l1:loop
fetch cur into temp_id;
fetch cur2 into temp_salary;
if(temp_salary<avg_salary) then
set temp_salary=temp_salary+temp_salary*0.1;
insert into incr_salary values(temp_id,temp_salary);
end if;
if exitcond then
close cur;
close cur2;
leave l1;
end if;
end loop l1;
end
//


17C
mysql> delimiter //
mysql> create procedure check_salary()
    -> begin
    -> declare temp_emp int;
    -> declare temp_dno int;
    -> declare temp_salary int;
    -> declare avg_salary int;
    -> declare temp_dno_dept_salary int;
    -> declare ec boolean;
    -> declare cur1 cursor for select avg(salary),dno from emp group by dno;
    -> declare continue handler for not found set ec=true;
    -> open cur1;
    -> l1:loop
    -> fetch cur1 into temp_salary,temp_dno;
    -> insert into dept_salary values(temp_salary,temp_dno);
    -> if ec then
    -> close cur1;
    -> leave l1;
    -> end if;
    -> end loop l1;
    -> end
    -> //


18A
delimiter //
create trigger after_delete
after delete on client_master
for each row
begin
insert into audit_table
set action='DELETE',
id=old.id,
data=old.data;
end
//

delimiter //
create trigger after_update
after update on client_master
for each row
begin
insert into audit_table
set action='UPDATE',
id=old.id,
data=old.data;
end
//


18B
delimiter //
create trigger after_insert
after insert
on emp
for each row
begin
if(new.salary<50000) then
signal sqlstate '45000' set message_text='Rejected!!!';
end if;
insert into tracking
set eno=new.eno,
salary=new.salary;
end
//


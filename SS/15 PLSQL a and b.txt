15. a) Write an SQL code block these raise a user defined exception where business rule is voilated. BR for client_ master table specifies when the value of bal_due field is less than 0 handle the exception.

SQL> create table client_master(
  2     id number(2) not null primary key,
  3     bal_due number(10,2)
  4  );
SQL> insert into client_master (id,bal_due) values (1,500);
1 row created.
SQL> insert into client_master (id,bal_due) values (2,700);
1 row created.
SQL> insert into client_master (id,bal_due) values (3,-300);

1 row created.

SQL> insert into client_master (id,bal_due) values (4,-400);

1 row created.

SQL> insert into client_master (id,bal_due) values (5,800);

1 row created.

SQL> select * from client_master;
        ID    BAL_DUE
---------- ----------
         1        500
         2        700
         3       -300
         4       -400
         5        800

SQL> edit
Wrote file afiedt.buf

  1  declare
  2     c_id client_master.id%type := &c_id;
  3     c_baldue client_master.bal_due%type;
  4     balance_exception exception;
  5  begin
  6     select bal_due into c_baldue from client_master where id = c_id;
  7     if c_baldue<0 then
  8             raise balance_exception;
  9     else
 10             dbms_output.put_line('Your balance due is: '||c_baldue);
 11     end if;
 12     exception
 13             when balance_exception then
 14             dbms_output.put_line('Your balance due is in negative: '||c_baldue);
 15* end;
SQL> /
Enter value for c_id: 2
old   2:        c_id client_master.id%type := &c_id;
new   2:        c_id client_master.id%type := 2;
Your balance due is: 700

PL/SQL procedure successfully completed.

SQL> /
Enter value for c_id: 3
old   2:        c_id client_master.id%type := &c_id;
new   2:        c_id client_master.id%type := 3;
Your balance due is in negative: -300

PL/SQL procedure successfully completed.

SQL>



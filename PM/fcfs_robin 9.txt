import java.util.*;
class FCFS {
public void fcfs() 
{
int n,
Scanner sc = new Scanner(System.in);
System.out.print("Enter number of process : ");
n=sc.nextInt();
int burst_time[]=new int[n];
int waiting_time[]=new int[n];
for(int i=0;i<n;i++)
{
System.out.print("Enter BurstTime for process "+i+" : ");
burst_time[i]=sc.nextInt(); 
}
sc.close(); 
waiting_time[0]=0;
for(int i=1;i<n;i++)
{
waiting_time[i]=waiting_time[i-1]+burst_time[i-1];
}
//OUTPUT
System.out.println("--------+---------------+------------");
System.out.println("Process\t|BurstTime\t|WaitingTime");
System.out.println("--------+---------------+------------");
for(int i=0;i<n;i++)
{
System.out.println("P"+i+"\t|"+burst_time[i]+"\t\t|"+waiting_time[i]);
}
System.out.println("--------+---------------+------------");
for(int i=0;i<n;i++)
{
sum+=waiting_time[i];
}
System.out.println("Average waiting time = "+(sum/n));
}
}



class ROBIN
{
public void robin()
{
int num;
Scanner s = new Scanner(System.in);
System.out.print("Enter number of processes : ");
num = s.nextInt();
int wtime[],btime[],rtime[],quantum;
wtime = new int[num];
btime = new int[num];
rtime = new int[num];
for(int i=0;i<num;i++)
{ 
System.out.print("Enter burst time for process "+i+" : "); 
btime[i] = s.nextInt(); 
rtime[i] = btime[i]; 
wtime[i]=0; 
} 
System.out.print("\nEnter time slice : "); 
quantum = s.nextInt(); 
int rp = num;
int i=0; int time=0; 
System.out.print("0"); 
s.close();
wtime[0]=0; while(rp!=0) 
{ 
if(rtime[i]>quantum)
{
rtime[i]=rtime[i]-quantum;
System.out.print(" | P["+(i+1)+"] | ");
time+=quantum;
System.out.print(time);
}
else if(rtime[i]<=quantum && rtime[i]>0)
{
time+=rtime[i];
rtime[i]=rtime[i]-rtime[i];
System.out.print(" | P["+(i+1)+"] | ");
rp--;
System.out.print(time);
}
i++;
if(i==num)
{
i=0;
}
} 
}
}
public class fcfs_robin
{
public static void main(String[] args) {
int ch=1;
Scanner sc = new Scanner(System.in);
System.out.println("1.FCFS\n2.Round Robin\n3.Exit");
System.out.println("Enter your choice : ");
ch=sc.nextInt();
switch (ch) 
{
case 1:
System.out.println("FCFS Scheduling");
FCFS fobj = new FCFS();
fobj.fcfs();
break;

case 2:
System.out.println("Round Robin Scheduling");
ROBIN robj = new ROBIN();
robj.robin();
default:
break;
}
sc.close();
}
}sum=0;